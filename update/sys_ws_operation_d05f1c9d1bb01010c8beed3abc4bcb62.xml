<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>report_issue</name>
        <operation_script><![CDATA[(function process( /*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {
    // Get the query parameters from the request (all strings)
    var licensePlate = request.queryParams.license_plate + '';
    var color = request.queryParams.color + '';
    var make = request.queryParams.make + '';
    var model = request.queryParams.model + '';
    var description = request.queryParams.description + '';

    // Lookup the employee car using the parameters
    // TODO: Create EmployeeCar script include
    // TODO: Add method find() which accepts the specified string parms
    //       and returns a GlideRecord (if found) or null (not found)

	function test() {
		var x = new GlideRecordSecure('x_pir_parking_issue');
		x.addQuery('u_description', 'test_admin');
		x.query();
		var rows = x.getRowCount();
		var y = x.getValue('u_car');
		var id = x.getUniqueValue();
		var a = 1;
	}
	
	test();
	
    function employeeCar(licensePlate, color, make, model) {
        var car = new GlideRecordSecure('x_pir_employee_car');
		car.addQuery('license_plate_number', '=', licensePlate);
		car.query();
// 		var uniqueId = car.getUniqueValue();
		var uniqueId = car.getValue('sys_id');
		var test = car.getRowCount();
		return car;
    }

	var car = employeeCar(licensePlate, color, make, model);
	var uniqueValue = car.getUniqueValue();
//     var car = new EmployeeCar().find(licensePlate, color, make, model);
    if (!car) {
        // Return a 404 not found
        return new sn_ws_err.NotFoundError("Car could not be found");
    }

    // TODO: create ParkingIssue script include
    // TODO: create create() method that accepts the car (GlideRecord)
    //       and the description (string) and returns the GlideRecord
    //       for the created Parking Issue record, or null;
	
	function createParkingIssue(car, description) {
		var issue = new GlideRecord('x_pir_parking_issue');
		issue.initialize();
// 		issue.u_car = car.license_plate_number;
		issue.u_car = car.getUniqueValue();
		issue.u_description = description;
		var id = issue.insert();
		return id;
	}
	
	var issueId = createParkingIssue(car, description);
//     var issue = new ParkingIssue().create(car, description);
//     if (!issue) {
//         var myError = new sn_ws_err.ServiceError();
//         myError.setStatus(500); // Internal server error
//         myError.setMessage("Parking issue could not be created");
//         return myError;
//     }

    // Set response to HTTP Status 200 (OK) and return the newly created number in a JSON payload
    response.setStatus(200);
    response.setBody({
        "issue_number": issueId,
		"unique_value": uniqueValue
    });
})(request, response);]]></operation_script>
        <operation_uri>/api/x_pir/parking_issue</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-14 13:29:05</sys_created_on>
        <sys_id>d05f1c9d1bb01010c8beed3abc4bcb62</sys_id>
        <sys_mod_count>12</sys_mod_count>
        <sys_name>report_issue</sys_name>
        <sys_package display_value="Parking Issues" source="x_pir">2bc7b833673212008db1bcb532415a9d</sys_package>
        <sys_policy/>
        <sys_scope display_value="Parking Issues">2bc7b833673212008db1bcb532415a9d</sys_scope>
        <sys_update_name>sys_ws_operation_d05f1c9d1bb01010c8beed3abc4bcb62</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2020-05-14 14:49:33</sys_updated_on>
        <web_service_definition display_value="Parking Issue">befc145d1bb01010c8beed3abc4bcbd3</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
